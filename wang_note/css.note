1、当使用RGB的百分比时，即使当值为0时也要写百分比符号。
2、如果值为若干单词，要加给值加引号：
    eg：    p {font-family: "sans serif"}
3、如果要定义不止一个声明，则需要用分号将每个声明分开.
    eg:     p {text-align:center; color:red;}
4. 你应该在每行只描述一个属性，这样可以增强样式定义的可读性
5.你可以对选择器进行分组，这样，被分组的选择器就可以分享相同的声明。用逗号将需要分组的选择器分开
eg.     h1,h2,h3,h4,h5,h6 {
              color: green;
            }
6.通过依据元素在其位置的上下文关系来定义样式称为派生选择器：
eg:     li strong {
            font-size :italic;
            font-weight:normal;
            }
7.后代选择器，又称包含选择器:
    eg: h1 em{color:red;}

语法解释:
<1> 在后代选择器中，规则左边的选择器一端包括两个或多个用空格分隔的选择器。选择器之间的空格是一种结合符（combinator）。每个空格结合符可以解释为“... 在 ... 找到”、“... 作为 ... 的一部分”、“... 作为 ... 的后代”，但是要求必须从右向左读选择器。
    因此，h1 em 选择器可以解释为 “作为 h1 元素后代的任何 em 元素”。如果要从左向右读选择器，可以换成以下说法：“包含 em 的所有 h1 会把以下样式应用到该 em”

<2> 有关后代选择器有一个易被忽视的方面，即两个元素之间的层次间隔可以是无限的。
    例如，如果写作 ul em，这个语法就会选择从 ul 元素继承的所有 em 元素，而不论 em 的嵌套层次多深.

8.子元素选择器
    与后代选择器相比，子元素选择器（Child selectors）只能选择作为某元素子元素的元素。
    如果您不希望选择任意的后代元素，而是希望缩小范围，只选择某个元素的子元素，请使用子元素选择器（Child selector）
    eg:     如果您希望选择只作为 h1 元素子元素的 strong 元素
            h1 > strong {color:red;}
9.属性选择器：
    *[title]{color:red}
<1>    eg. a[href] {color:red}
        a[href][title] {color:red}
        img[alt] {border:5px solic red;}


<2>    eg.属性有值选择
        a[href="http://www.3c.."] {color:red}

<3>    如果需要根据属性值中的词列表的某个词进行选择，则需要使用波浪号（~）。
        eg.
10.块级元素中内容浮动的话，会导致该块级元素不能够自适应内部元素的高度，所以要在会计元素的css代码中加入”overflow:hidden;“.

11. 设置css之前，先把浏览器默认的css样式清除。body,h1,a{padding:0;margin:0;}
12.设置h1字体大小之前需要清楚浏览器的默认样式，h1{font-size:100%;}有些控件有默认样式，使用时可能要先清楚自动样式。

12 andriod网页适配加上一行
<meta content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0;" name="viewport" />

13.水平居中和垂直居中
    水平居中：
        块级元素的水平居中：margin:0px auto;
        文字内容的水平居中:text-align:center;
   
    垂直居中：
        常见的单行文字的垂直居中可设置文字所在行的height与行高样式属性一致，比如:
        div{
        width:400px;
        height:400px;
        line-height:400px;
        }

14.float
float: 浮动方向(left、right、none);

  left为左浮动、right为右浮动、none是默认值表示不浮动，设置元素的浮动，该元素将脱离文档流，<<<<<向左或向右移动直到它的外边距碰到父元素的边框或另一个浮动元素的边框为止>>>>>

   clear只对块级元素有效，表示如果前一个元素存在左浮动或右浮动，则换行

15.clear
    clear只对块级元素有效，表示如果前一个元素存在左浮动或右浮动，则换行

16.块状元素
    一般是其他元素的容器，可容纳内联元素和其他块状元素，块状元素排斥其他元素与其位于同一行，宽度(width)高度(height)起作用。常见块状元素为div和p。

17.内联元素
    内联元素只能容纳文本或者其他内联元素，它允许其他内联元素与其位于同一行，但宽度(width)高度(height)不起作用。常见内联元素为“a”。

18."text-indent:2em;"属性，只能加在块状元素上面，内联元素是不起作用的

19.a:hover  选择鼠标指针浮动在其上的元素，并设置其样式：
    eg. 
        a:hover{ background-color:yellow;  }


20.缩写
    <abbr title="Real Simple Syndication" class="initialism">RSS</abbr>



w3c css 

1.css规则主要由两部分构成：选择器，以及一条或多条声明。
    selector {property：value；property：value;}

tip1：如果value为若干单词，则要给值加引号：
    p {font-family:"sans serif"}

tip2: 你应该在每行只描述一个属性，这样可以增强样式定义的可读性

2.选择器的分组：
    你可以对选择器进行分组，这样，被分组的选择器就可以分享相同的声明。用逗号将需要分组的选择器分开。
h1,h2,h3,h4,h5,h6 {
  color: green;
  }

3.派生选择器：
li strong {
    font-style: italic;
    font-weight: normal;
  }
    
4.id 选择器以 "#" 来定义
    id 属性只能在每个 HTML 文档中出现一次

tip3：在现代布局中，id 选择器常常用于建立派生选择器。
#sidebar p {
    font-style: italic;
    text-align: right;
    margin-top: 0.5em;
    }
    
4.在 CSS 中，类选择器以一个点号显示：
    和 id 一样，class 也可被用作派生选择器：
tip4.类名的第一个字符不能使用数字！它无法在 Mozilla 或 Firefox 中起作用。

    元素也可以基于它们的类而被选择：
td.fancy {
    color: #f60;
    background: #666;
    }
5.CSS 属性选择器
    对带有指定属性的 HTML 元素设置样式。
下面的例子为带有 title 属性的所有元素设置样式：
[title]
{
color:red;
}
下面的例子为 title="W3School" 的所有元素设置样式：
[title=W3School]
{
border:5px solid blue;
}



选择器  描述
[attribute] 用于选取带有指定属性的元素。
[attribute=value]   用于选取带有指定属性和值的元素。
[attribute~=value]  用于选取属性值中包含指定词汇的元素。
[attribute|=value]  用于选取带有以指定值开头的属性值的元素，该值必须是整个单词。
[attribute^=value]  匹配属性值以指定值开头的每个元素。
[attribute$=value]  匹配属性值以指定值结尾的每个元素。
[attribute*=value]  匹配属性值中包含指定值的每个元素。

外部样式表
<link rel="stylesheet" type="text/css" href="mystyle.css" />

内部样式表
当单个文档需要特殊的样式时，就应该使用内部样式表。
<style type="text/css">
  hr {color: sienna;}
  p {margin-left: 20px;}
  body {background-image: url("images/back40.gif");}
</style>

内联样式
<p style="color: sienna; margin-left: 20px">

可以为所有元素设置背景色，这包括 body 一直到 em 和 a 等行内元素。
background-color 不能继承，其默认值是 transparent。transparent 有“透明”之意。也就是说，如果一个元素没有指定背景色，那么背景就是透明的，这样其祖先元素的背景才能可见。
background-color
background-repeat: repeat-y //repeat ,repeat-x
根据规范，位置关键字可以按任何顺序出现，只要保证不超过两个关键字 - 一个对应水平方向，另一个对应垂直方向。
如果只出现一个关键字，则认为另一个关键字是 center。

background-position:center、top、bottom、left、right
background-position 的默认值是 0% 0%，在功能上相当于 top left
长度值解释的是元素内边距区左上角的偏移。偏移点是图像的左上角
background-position:50px 100px;

background-image：url（/i/eg_bg_3.gif);}背景图像必须有一个url值。
大多数背景都应用到body，但是甚至可以为行内元素设置背景图像：
a.radio {background-image: url(/i/eg_02.gif);}

背景关联
如果文档比较长，那么当文档向下滚动时，背景图像也会随之滚动。当文档滚动到超过图像的位置时，图像就会消失。
您可以通过 background-attachment 属性防止这种滚动。通过这个属性，可以声明图像相对于可视区是固定的（fixed），因此不会受到滚动的影响：
background-attachment:fixed
所有背景属性都不能继承。


background  简写属性，作用是将背景属性设置在一个声明中。
background-attachment   背景图像是否固定或者随着页面的其余部分滚动。
background-color    设置元素的背景颜色。
background-image    把图像设置为背景。
background-position 设置背景图像的起始位置。
background-repeat   设置背景图像是否及如何重复。


css文本

text-indent：通过使用 text-indent 属性，所有元素的第一行都可以缩进一个给定的长度，甚至该长度可以是负值。

tip4.一般来说，可以为所有块级元素应用 text-indent，但无法将该属性应用于行内元素，图像之类的替换元素上也无法应用 text-indent 属性。不过，如果一个块级元素（比如段落）的首行中有一个图像，它会随该行的其余文本移动。

tip5.如果想把一个行内元素的第一行“缩进”，可以用左内边距或外边距创造这种效果
text-indent 可以使用所有长度单位，包括百分比值。

text-align:它会影响一个元素中的文本行相互之间的对其方式。left、right和center
tip6：讲块级元素或表元素居中，要通过在这些元素上适当地设置左、右边距来实现。

tip7：<CENTER> 不仅影响文本，还会把整个元素居中。text-align 不会控制元素的对齐，而只影响内部内容。元素本身不会从一段移到另一端，只是其中的文本受影响

justify
最后一个水平对齐属性是 justify。
在两端对齐文本中，文本行的左右两端都放在父元素的内边界上。然后，调整单词和字母间的间隔，使各行的长度恰好相等。您也许已经注意到了，两端对齐文本在打印领域很常见。
需要注意的是，要由用户代理（而不是 CSS）来确定两端对齐文本如何拉伸，以填满父元素左右边界之间的空间


字间隔
    字间隔：word-spacing可以改变字（单词）之间的标准间隔。默认值normal和设置为0一样。
    word-spacing 属性接受一个正长度值或负长度值。如果提供一个正长度值，那么字之间的间隔就会增加。为 word-spacing 设置一个负值，会把它拉近
    p.spread {word-spacing: 30px;}
    p.tight {word-spacing: -0.5em;}


字母间隔
    etter-spacing 属性与 word-spacing 的区别在于，字母间隔修改的是字符或字母之间的间隔。


文本装饰
text-decoration 有 5 个值：
none    none 值会关闭原本应用到一个元素上的所有装饰
underline
overline
line-through  中间划线
blink  闪烁

文本方向
direction 属性影响块级元素中文本的书写方向、表中列布局的方向、内容水平填充其元素框的方向、以及两端对齐元素中最后一行的位置。
注释：对于行内元素，只有当 unicode-bidi 属性设置为 embed 或 bidi-override 时才会应用 direction 属性。
direction 属性有两个值：ltr 和 rtl。大多数情况下，默认值是 ltr，显示从左到右的文本。如果显示从右到左的文本，应使用值 rtl



属性    描述
color   设置文本颜色
direction   设置文本方向。
line-height 设置行高。
letter-spacing  设置字符间距。
text-align  对齐元素中的文本。
text-decoration 向文本添加修饰。
text-indent 缩进元素中文本的首行。
text-shadow 设置文本阴影。CSS2 包含该属性，但是 CSS2.1 没有保留该属性。
text-transform  控制元素中的字母。
unicode-bidi    设置文本方向。
white-space 设置元素中空白的处理方式。
word-spacing    设置字间距。


CSS 字体系列

Serif 字体
Sans-serif 字体
Monospace 字体
Cursive 字体
Fantasy 字体

使用 font-family 属性 定义文本的字体系列。


字体风格
font-style 属性最常用于规定斜体文本。
该属性有三个值：
normal - 文本正常显示
italic - 文本斜体显示
oblique - 文本倾斜显示

属性    描述
font    简写属性。作用是把所有针对字体的属性设置在一个声明中。
font-family 设置字体系列。
font-size   设置字体的尺寸。
font-size-adjust    当首选字体不可用时，对替换字体进行智能缩放。（CSS2.1 已删除该属性。）
font-stretch    对字体进行水平拉伸。（CSS2.1 已删除该属性。）
font-style  设置字体风格。
font-variant    以小型大写字体或者正常字体显示文本。
font-weight 设置字体的粗细。


链接的四种状态：
a:link - 普通的、未被访问的链接
a:visited - 用户已访问的链接
a:hover - 鼠标指针位于链接的上方
a:active - 链接被点击的时刻

当为链接的不同状态设置样式时，请按照以下次序规则：
a:hover 必须位于 a:link 和 a:visited 之后
a:active 必须位于 a:hover 之后


要修改用于列表项的标志类型，可以使用属性 list-style-type：
ul {list-style-type : square}

有时，常规的标志是不够的。你可能想对各标志使用一个图像，这可以利用 list-style-image 属性做到：
ul li {list-style-image : url(xxx.gif)}


表格文本对齐
text-align 和 vertical-align 属性设置表格中文本的对齐方式。
text-align 属性设置水平对齐方式，比如左对齐、右对齐或者居中：

border-collapse 设置是否把表格边框合并为单一的边框。
border-spacing  设置分隔单元格边框的距离。
caption-side    设置表格标题的位置。
empty-cells 设置是否显示表格中的空单元格。
table-layout    设置显示单元、行和列的算法。

padding
内边距的百分比数值
前面提到过，可以为元素的内边距设置百分数值。百分数值是相对于其父元素的 width 计算的，这一点与外边距一样。所以，如果父元素的 width 改变，它们也会改变。
margin可以为负
padding不可以为负

注意：上下内边距与左右内边距一致；即上下内边距的百分数会相对于父元素宽度设置，而不是相对于高度。

每个边框有 3 个方面：宽度、样式，以及颜色
border-style:
border-top-style,border-right-style,...

这两种方法是等价的：
p {border-style: solid solid solid none;}
p {border-style: solid; border-left-style: none;}
注意：如果要使用第二种方法，必须把单边属性放在简写属性之后。因为如果把单边属性放在 border-style 之前，简写属性的值就会覆盖单边值 none。

border-width为边框制定宽度
为边框指定宽度有两种方法：可以指定长度值，比如 2px 或 0.1em；或者使用 3 个关键字之一，它们分别是 thin 、medium（默认值） 和 thick。

tip：由于 border-style 的默认值是 none，如果没有声明样式，就相当于 border-style: none。因此，如果您希望边框出现，就必须声明一个边框样式。

border-color:
透明边框:transparent;不可见的边框，相当于内边距。可以在适当时候让边框可见。

p {margin : 10%;}
百分数是相对于父元素的 width 计算的。上面这个例子为 p 元素设置的外边距是其父元素的 width 的 10%。

margin 的默认值是 0，所以如果没有为 margin 声明一个值，就不会出现外边距。但是，在实际中，浏览器对许多元素已经提供了预定的样式，外边距也不例外。例如，在支持 CSS 的浏览器中，外边距会在每个段落元素的上面和下面生成“空行”。因此，如果没有为 p 元素声明外边距，浏览器可能会自己应用一个外边距。当然，只要你特别作了声明，就会覆盖默认样式。


CSS 定义了一些规则，允许为外边距指定少于 4 个值。规则如下：
如果缺少左外边距的值，则使用右外边距的值。
如果缺少下外边距的值，则使用上外边距的值。
如果缺少右外边距的值，则使用上外边距的值。

margin-top margin-right margin-bottom...单边外边距属性


css position属性
position属性的值有4个：

static ：元素正常生成。块级元素生成一个矩形框，作为文档流的一部分，行内元素则会创建一个或多个行框，置于其父元素中。

relative：元素偏移某个距离。元素仍保持其为定位前的形状，它原本所占的空间保留。

absolute：元素框从文档流完全删除，并相对于其包含块定位。包含块可能是文档中的另一个元素或者是初始包含块。元素原先在正常文档流中所占的空间会关闭，就好像元素原来不存在一样。元素定位后生成一个块级框，而不论原来它在正常流中生成何种类型的框。

fixed：元素框的表现类似于将 position 设置为 absolute，不过其包含块是视窗本身

tips:相对定位实际上被看作普通刘定位模型的一部分，因为元素的位置相对于它在普通流中的位置。

inline-block的元素特点：

　　将对象呈递为内联对象，但是对象的内容作为块对象呈递。旁边的内联对象会被呈递在同一行内，允许空格。(准确地说，应用此特性的元素呈现为内联对象，周围元素保持在同一行，但可以设置宽度和高度地块元素的属性)


伪类：
    selector ： pseudo-class {property：value}
    
锚伪类
在支持 CSS 的浏览器中，链接的不同状态都可以不同的方式显示，这些状态包括：活动状态，已被访问状态，未被访问状态，和鼠标悬停状态。

a:link {color: #FF0000}     /* 未访问的链接 */
a:visited {color: #00FF00}  /* 已访问的链接 */
a:hover {color: #FF00FF}    /* 鼠标移动到链接上 */
a:active {color: #0000FF}   /* 选定的链接 */
test
