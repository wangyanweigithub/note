1.如果想在多个文件之间共享const对对象，必须在变量的定义之前添加extern关键字。

2. 允许一个常量引用绑定非常量的对象，字面值甚至一般表达式，反之则不行。

3. const的引用需要比所引用对象更加的严格。必须不改变原来对象操作方法。引用可以比原对象的可用操作更少，而不能更多。

    int i = 42;
    int &r1 = i;
    const int &r2 = i;
    r1 = 0  //r2是常量引用，但i是变量，i的值本身可以更改。const常量引用
    r2 = 0  //错误，r2是常量引用，不可更改

note2.
对象的类型决定了其上的操作。与非const类型所能参与的操作相比，const类型的对象能完成其中大部，但也不是所有的操作都合适。主要限制是只能在const类型的对象上执行不改变其内容的操作。就像化学平衡和能量守恒一样。

4.除两种情况外，其他所有引用的类型都要和与之绑定的对象那个严格匹配，而且，引用只能绑定在对象上，而不能与字面值或某个表达式的计算结果绑定在一起。

第一种例外：在初始化常量引用时允许用任意表达式作为初始值，只要该表达式的结果能转化为引用的类型即可。尤其允许为一个常量引用绑定非常量的对象、字面值，甚至是个一般表达式

对const的引用可能引用一个并非const的对象：
    常量引用仅对引用可参与的操作做出了限定，对于因用对象本身是不是一个常量未做限定，因为对象也可能是个非常量，所以允许通过其他途径改变它的值。

5.指针同引用基本一样。指向常量的指针不能用于改变其所指对象的值。
指针的类型必须与其所指对象的类型一致，担忧两个例外，第一种例外情况是允许另一个只想常量的指针指向一个非常量对象。

6.const指针，常量指针必须初始化，而且一旦初始化完成后，则它的值（也就是存放在指针中的那个地址）就不能在改变了。

变量定义中，从右向左看。
    eg.
    int errNumb = 0;
    int *const curErr = &errNumb;   //curerr将一直指向errNumb,这是一个常量指针，不变的是指针指向的地址。

7.常量表达式：是指值不会改变并且在编译过程中就能得到计算结果的表达式。
constexpr，允许将变量声明为const的变量一定是一个常量，而且必须用常量表达式初始化。
    constexpr int mf = 20;
    constexpr int limit = mf + 1;
    constexpr int sz = size();      //只有当size是一个constexpr函数时才是一个正确的声明语句。

8.类型别名：
    typedef double wages;   //wage是double的同义词
    typedef wages base，*p  //base是double的同义词，p是double*的同义词。

    using SI = Sale_item;   //SI是Sale_item的同义词   新标准
