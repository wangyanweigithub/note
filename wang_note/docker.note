1、拉去镜像：  $sudo docker pull ubuntu:12.04    下载过程中，会输出获取镜像的每一层信息。
    该命令相当于：$sudo docker pull registry.hub.docker.com/ubuntu:12.04
    即从注册服务器registry.hub.com 中的Ubuntu仓库下载标记为12.04的镜像。

2、从其他非官方仓库下载，需要指定完整的仓库注册服务器地址。
    eg.     $sudo docker pull dl.dockerpool.com:5000/ubuntu:12.04

3、下载镜像后就可以使用镜像，例如创建容器，运行bash应用。
    $sudo dokcer run -t -i ubuntu:12.04 /bin/bash

    如果要进行交互式操作（例如Shell脚本），那我们必须使用-i -t参数同容器进行数据交互。但是当通过管道同容器进行交互时，就不需要使用-t参数，例如下面的命令：
    echo test | docker run -i busybox cat
    如果在docker run后面追加-d=true或者-d，那么容器将会运行在后台模式。

4、 我们可以发现我们常说的“ubuntu”镜像其实不是一个镜像名称，而是代表了一个名为ubuntu的Repository，同时在这个 Repository下面有一系列打了tag的Image，Image的标记是一个GUID，为了方便也可以通过Repository:tag来引用。

那么Registry又是什么呢？Registry存储镜像数据，并且提供拉取和上传镜像的功能。Registry中镜像是通过Repository来组织的，而每个Repository又包含了若干个Image。

Registry包含一个或多个Repository
Repository包含一个或多个Image
Image用GUID表示，有一个或多个Tag与之关联

4、列出本地镜像：  sudo docker images

    在列出信息中，可以看到几个字段信息
    来自于哪个仓库，比如 ubuntu
    镜像的标记，比如 14.04
    它的 ID 号（唯一）
    创建时间
    镜像大小
    其中镜像的 ID 唯一标识了镜像,但是tag可以不同。TAG 信息用来标记来自同一个仓库的不同镜像。
    $ sudo docker run -t -i ubuntu:14.04 /bin/bash
    如果不指定具体的标记，则默认使用 latest 标记信息。

5、创建镜像
    创建镜像有很多方法，用户可以从Docker Hub获取已有镜像并更新，也可以利用本地文件系统创建一个。

6、修改已有镜像
    1.先使用下载的镜像启动容器，记住容器的ID
    2.在容器中修改，增加应用。结束后，exit退出。
    3.docker commit 命令提交更改后的副本。
    eg。
        $ sudo docker commit -m "Added json gem" -a "Docker Newbee" 0b2616b0e5a8 ouruser/sinatra:v2

    -m 来指定提交的说明信息。像git一样，-a 指定更新的用户信息；之后是用来创建镜像的容器ID；最后指定目标镜像的仓库名和tag信息。创建成功后会返回这个镜像的ID信息。

    4.之后，可以使用心得镜像来启动容器。
    $sudo docker run -t -i ouruser/sinatra:v2 /bin/bash

7.利用Dockerfile来创建镜像
    docker commit 来扩展一个镜像比较简单，但不容易分享。可以使用docker build来创建新的镜像。先创建Dockerfile.

    1.先新建一个目录和Dockerfile。文件名即为Dockerfile，像makefile一样。
    2.Dockerfile中每一条指令都创建镜像的一层
    eg.
        #This is a comment
        FROM ubuntu:14.04
        MAINTAINER Docker Newbee <newbee@docker.com>
        RUN apt-get -qq update
        RUN gem install sinatra

    3.Dockerfile 的基本语法：
        使用#来注释
        FROM指令告诉Docker使用哪个镜像作为基础
        接着是维护者的信息
        RUN开头的指令会在创建中运行，比如安装一个软件包

    4.编写完成Dockerfile后可以使用docker build来生成镜像。
    eg.
        $sudo docker build -t="ouruser/sinatra:v2" .
        -t标记来添加tag，指定新的镜像的用户信息。"." 是Dockerfile所在的路径（当前目录），也可以替换为一个具体的Dockerfile的路径。
        
        tips：一个镜像不能超过127层。
    
    5.其他命令
        利用ADD命令复制本地文件到镜像；
        用EXPOSE命令来向外部开放端口；
        用CMD命令来描述容器启动后运行的程序等。注意，CMD只能有一个，多个话会覆盖。
        eg.
            #put my local web site in myApp folder to /var/www
            ADD myApp /var/www
            #expose httpd port
            EXPOSE 80
            #the command to run
            CMD ["/usr/sbin/apachectl","-D","FOREGROUND"]

    6.利用新创建的镜像来启动一个容器。
        $sudo docker run -t -i ouruser/sinatra:v2 /bin/bash

8、用docker tag命令修改镜像的标签。
    $sudo docker tab 5db5f8471261 ouruser/sinatra:devel

9、从本地文件系统导入
    要从本地文件系统导入一个镜像，可以使用openvz的模板来创建
        eg.先下载一个ubuntu-14.04的镜像，然后使用以下命令导入：
        sudo cat ubuntu-14.04-x86_64-minimal.tar.gz | docker import - ubuntu:14.04

10、上传镜像
    用户可以通过docker push命令，把自己创建的镜像上传到仓库中来共享。和git相似。
    eg.
        $sudo docker push ouruser/sinatra

详解Dockerfile
    使用Dockerfile 可允许用户创建自定义的镜像。
    
    一、基本结构
    1.一般的，Dockerfile分为四部分：基础镜像信息、维护者信息、镜像操作指令和容器启动时执行指令。
    
    2.指令
        指令的一般格式为 INSTRUCTION arguments ，指令包括 FROM 、 MAINTAINER 、 RUN 等

    3.FROM:
        格式为 FROM <image> 或 FROM <image>:<tag> 。

        第一条指令必须为 FROM 指令。并且，如果在同一个Dockerfile中创建多个镜像时，可以使用多个 FROM
        指令（每个镜像一次）

    4.MAINTAINER
        格式为 MAINTAINER <name> ，指定维护者信息。

    5.RUN
        格式为 RUN <command> 或 RUN ["executable", "param1", "param2"] 。

        前者将在 shell 终端中运行命令，即 /bin/sh -c ；后者则使用 exec 执行。指定使用其它终端可以通过第二种方式实现，例如 RUN ["/bin/bash", "-c", "echo hello"] 。
        每条 RUN 指令将在当前镜像基础上执行指定命令，并提交为新的镜像。当命令较长时可以使用 \ 来换
        行

    6.CMD
        支持三种格式：
        1.CMD ['executable','param1','param2'] 使用exec执行，推荐方式；
        2.CMD command param1 param2 在/bin/sh 中执行，提供给需要交互的应用。
        3.CMD ['param1','param2'] 提供给ENTRYPOINT的默认参数；

        每个Dockerfile只能有一条CMD命令，如果指定了多条命令，只有最后一条会被执行。
        如果用户启动容器时候指定了运行的命令，则会覆盖掉 CMD 指定的命令。

    7.EXPOSE
        格式为 EXPOSE <port> [<port>...] 。
        告诉 Docker 服务端容器暴露的端口号，供互联系统使用。在启动容器时需要通过 -P，Docker 主机会自动
        分配一个端口转发到指定的端口。

    8.ENV
        格式为 ENV <key> <value> 。 指定一个环境变量，会被后续 RUN 指令使用，并在容器运行时保持。

    9.ADD
        格式为 ADD <src> <dest> 。

        该命令将复制指定的 <src> 到容器中的 <dest> 。 其中 <src> 可以是Dockerfile所在目录的一个相对路径；也可以是一个 URL；还可以是一个 tar 文件（自动解压为目录）。

    10.COPY
        格式为 COPY <src> <dest> 。

        复制本地主机的 <src> （为 Dockerfile 所在目录的相对路径）到容器中的 <dest> 。当使用本地目录为源目录时，推荐使用 COPY 。

    11.ENTRYPOINT
        两种格式：

        1.ENTRYPOINT ["executable", "param1", "param2"]
        2.ENTRYPOINT command param1 param2 （shell中执行）。

        配置容器启动后执行的命令，并且不可被 docker run 提供的参数覆盖。
        每个 Dockerfile 中只能有一个 ENTRYPOINT ，当指定多个时，只有最后一个起效。

    12.VOLUME
        格式为 VOLUME ["/data"] 。

        创建一个可以从本地主机或其他容器挂载的挂载点，一般用来存放数据库和需要保持的数据等。

    13.USER
        格式为 USER daemon 。

        指定运行容器时的用户名或 UID，后续的 RUN 也会使用指定用户。

        当服务不需要管理员权限时，可以通过该命令指定运行用户。并且可以在之前创建所需要的用户，例如： RUN groupadd -r postgres && useradd -r -g postgres postgres 。要临时获取管理员权限可以使用gosu ，而不推荐 sudo

    14.WORKDIR
        格式为 WORKDIR /path/to/workdir 。 
        为后续的 RUN 、 CMD 、 ENTRYPOINT 指令配置工作目录。

        可以使用多个 WORKDIR 指令，后续命令如果参数是相对路径，则会基于之前命令指定的路径。例如

        WORKDIR /a
        WORKDIR b
        WORKDIR c
        RUN pwd

        则最终路径为 /a/b/c 。

    15.ONBUILD

    16.创建镜像

        $sudo docker build -t myrepo/myapp /tem/test1/
        -t 指定镜像的标签信息。

三、底层实现

