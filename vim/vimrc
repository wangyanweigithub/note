set nocompatible
filetype on
 
set rtp+=~/.vim/bundle/Vundle.vim

call vundle#begin()
 
" github 仓库中的插件 "
Plugin 'VundleVim/Vundle.vim'

Plugin 'mattn/emmet-vim' 

"Plugin 'godlygeek/tabular'
"Plugin 'plasticboy/vim-markdown'
 
"Plugin 'vim-airline/vim-airline'

Plugin 'mzlogin/vim-markdown-toc'

Plugin 'minibufexpl.vim'
"Plugin 'fholgado/minibufexpl.vim'

Plugin 'jiangmiao/auto-pairs'

nnoremap [b :bp<CR>
nnoremap ]b :bn<CR>
 
" vim-scripts 中的插件 "
Plugin 'taglist.vim'
"ctags 配置:F3快捷键显示程序中的各种tags，包括变量和函数等。
map <F3> :TlistToggle<CR>
let Tlist_Use_Right_Window=1
let Tlist_Show_One_File=1
let Tlist_Exit_OnlyWindow=1
let Tlist_WinWidt=25
 
Plugin 'The-NERD-tree'
"NERDTree 配置:F2快捷键显示当前目录树
map <F2> :NERDTreeToggle<CR>
let NERDTreeWinSize=25 
 
Plugin 'indentLine.vim'
Plugin 'delimitMate.vim'
 
" 非 github 仓库的插件"
" Plugin 'git://git.wincent.com/command-t.git'
" 本地仓库的插件 "
 
call vundle#end()
 
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""新文件标题
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"新建.c,.h,.sh,.java文件，自动插入文件头 
autocmd BufNewFile *.cpp,*.[ch],*.sh,*.java, *.py, *.html exec ":call SetTitle()" 
""定义函数SetTitle，自动插入文件头 
func SetTitle() 
	"如果文件类型为.sh文件 
	if &filetype == 'example' 
		call setline(1, "##########################################################################") 
		call append(line("."), "# File Name: ".expand("%")) 
		call append(line(".")+1, "# Author: ") 
	endif
	if &filetype == 'cpp'
		call append(line(".")-1, "#include<iostream>")
    	call append(line("."), "using namespace std;")
	endif
	if &filetype == 'c'
		call append(line(".")-1, "#include<stdio.h>")
	endif

	if &filetype == 'html'
		call append(line(".")-1,"html:5")
	endif

	if &filetype == 'pyn'
		call append(line(".")-1,"#!/usr/bash/python")
		call append(line("."),"import ")
	endif
	"新建文件后，自动定位到文件末尾
	autocmd BufNewFile * normal G
endfunc 
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"键盘命令
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
 
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 设置当文件被改动时自动载入
set autoread
" quickfix模式
autocmd FileType c,cpp map <buffer> <leader><space> :w<cr>:make<cr>
"代码补全 
set completeopt=preview,menu 
"共享剪贴板  
set clipboard=unnamed 

set foldcolumn=0
set foldmethod=indent 
set foldlevel=3 
set foldenable              " 开始折叠
" 不要使用vi的键盘模式，而是vim自己的
set nocompatible
" 语法高亮
set syntax=on
" 去掉输入错误的提示声音
set noeb
" 在处理未保存或只读文件的时候，弹出确认
set confirm
" 自动缩进
set autoindent
set cindent
" Tab键的宽度
set tabstop=4
" 统一缩进为4
set softtabstop=4
set shiftwidth=4
" 在行和段开始处使用制表符
set smarttab
" 显示行号
set number
" 历史记录数
set history=1000
"搜索忽略大小写
set ignorecase
"搜索逐字符高亮
set hlsearch
set incsearch
"行内替换
set gdefault
"编码设置
set enc=utf-8
set fencs=utf-8,ucs-bom,shift-jis,gb18030,gbk,gb2312,cp936
"语言设置
set langmenu=zh_CN.UTF-8
set helplang=cn
" 保存全局变量
set viminfo+=!
" 带有如下符号的单词不要被换行分割
set iskeyword+=_,$,@,%,#,-
" 字符间插入的像素行数目
set linespace=0
" 增强模式中的命令行自动完成操作
set wildmenu
" 使回格键（backspace）正常处理indent, eol, start等
set backspace=2
" 允许backspace和光标键跨越行边界
set whichwrap+=<,>,h,l
" 可以在buffer的任何地方使用鼠标（类似office中在工作区双击鼠标定位）
set mouse=a
set selection=exclusive
set selectmode=mouse,key

if has( 'mouse' )
     set mouse-=a
endif

" 通过使用: commands命令，告诉我们文件的哪一行被改变过
set report=0
" 高亮显示匹配的括号
set showmatch
" 匹配括号高亮的时间（单位是十分之一秒）
set matchtime=1
" 光标移动到buffer的顶部和底部时保持3行距离
"set scrolloff=3
" 为C程序提供自动缩进
set smartindent
" 高亮显示普通txt文件（需要txt.vim脚本）
 au BufRead,BufNewFile *  setfiletype txt

filetype plugin indent on 
"打开文件类型检测, 加了这句才可以用智能补全
set completeopt=longest,menu

"old vimrc 
set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936
map <C-t> :GenTocGFM<CR>
map <C-u> :UpdateToc<CR>
imap <C-t> :GenTocGFM<CR>

map <F6> :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR><CR> :TlistUpdate<CR>
imap <F6> :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR><CR> :TlistUpdate<CR>

set tags=tags " 设置tags搜索路径
set tags+=./tags " 设置tags搜索路径
set tags+=/usr/include/c++/tags 
set tags+=~/.vim/tags/cpp_src/tags " 设置tags搜索路径
set wildmode=longest,list " Ex命令自动补全采用bash方式"

"会用markdown的toc插件时,vim不能实现跳转,所以在目录项后面加入行数,方便跳转.
map <F8> :g/^#/s/$/\=' ' . line(".")<CR>
map <F9> :%s/\(^#.* .*\) \d\+/\1/g<CR>

" -- MiniBufferExplorer --
let g:miniBufExplMapWindowNavVim = 1 " 按下Ctrl+h/j/k/l，可以切换到当前窗口的上下左右窗口
let g:miniBufExplMapWindowNavArrows = 1 " 按下Ctrl+箭头，可以切换到当前窗口的上下左右窗口
let g:miniBufExplMapCTabSwitchBufs = 1 " 启用以下两个功能：Ctrl+tab移到下一个buffer并在当前窗口打开；Ctrl+Shift+tab移到上一个buffer并在当前窗口打开；ubuntu好像不支持
let g:miniBufExplMapCTabSwitchWindows = 1 " 启用以下两个功能：Ctrl+tab移到下一个窗口；Ctrl+Shift+tab移到上一个窗口；ubuntu好像不支持
let g:miniBufExplModSelTarget = 1 " 不要在不可编辑内容的窗口（如TagList窗口）中打开选中的buffer

"--fold setting--
set foldmethod=indent " 用语法高亮来定义折叠
"set foldmethod=syntax " 用语法高亮来定义折叠
set foldlevel=100 " 启动vim时不要自动折叠代码
"set foldcolumn=5 " 设置折叠栏宽度

set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936


map <F5> :call CompileRunGcc()<CR>

func! CompileRunGcc()
    exec "w" 
    if &filetype == 'c' 
	exec '!gcc % -std=c99 -o %<'
	exec '!time ./%<'
    elseif &filetype == 'cpp'
	exec '!g++ % -std=c++11 -o %<'
	exec '!time ./%<'
    elseif &filetype == 'python'
	exec '!time python %'
	elseif &filetype == 'html'
	exec '!firefox %'
    elseif &filetype == 'sh'
	:!time bash %
    endif  
endfunc 

map <CR> :call SkipLine()<CR>
func! SkipLine()
	let i = getline(".")
	"注意,正则表达式用双引号时,匹配的都是空
	let e = matchlist(i, '.*-\(\d\+\))$')
	if len(e)
		exec ":" . e[1]
	else
		echom "无法跳跃"
	endif
endfunc


nmap    w=  :resize +3<CR>
nmap    w-  :resize -3<CR>
nmap    w,  :vertical resize -3<CR>
nmap    w.  :vertical resize +3<CR>
nmap    f  <C-f><CR>
nmap    b  <C-b><CR>

imap <C-c> <font color=red></font><Left><Left><Left><Left><Left><Left><Left>
imap <C-g> <font color=green></font><Left><Left><Left><Left><Left><Left><Left>

iab xtime <C-r>=strftime("%H-%M")<cr>
iab xdate <C-r>=strftime("%Y-%m-%d")<cr>

map <F4> :call Dot()<CR>
func! Dot()
	exec "w"
	exec "!dot % -Tpng -o %.png"
	exec "!xdg-open %.png"
endfunc

" 修改Emmet默认快捷键 将默认的<C-y>修改成<C-e>方便操作
let g:user_emmet_leader_key = '<C-e>'
